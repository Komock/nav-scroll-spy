(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Animation function with requestAnimationFrame()
module.exports = function animate( draw, duration ) {
	let start = performance.now();
	requestAnimationFrame(function animate( time ) {
		let timePassed = time - start;
		if (timePassed > duration) timePassed = duration;
		draw(timePassed);
		if (timePassed < duration) requestAnimationFrame(animate);
	});
};

},{}],2:[function(require,module,exports){
let animate = require('./animate.js');

class scrollToElement {
	constructor(options) {
		let defaults = {
			anchors: 'a[href*="#"]',
			duration: 350,
			easing: 'easeInOut'
		};
		options ? this.options = Object.assign(defaults, options) : this.options = defaults;
	}

	setClickEvent() {
		let that = this,
			anchors = document.querySelectorAll(this.options.anchors);
		anchors.forEach(function(item) {
			item.addEventListener('click', e => that.clickHandler(e));
		});
	}

	makeEaseInOut(timing, progress) {
		return () => {
			if (progress < 0.5) {
				return timing(2 * progress) / 2;
			} else {
				return (2 - timing(2 * (1 - progress))) / 2;
			}
		};
	}

	timingFn(progress, startVal, displace) {
		if (this.easing === 'linear') {
			return (progress * displace) + startVal;
		} else {
			// Default animation 'easeInOut'
			let easeInOut = this.makeEaseInOut((progress)=> Math.pow(progress, 2), progress);
			return (easeInOut() * displace) + startVal;
		}
	}

	clickHandler(e) {
		e.preventDefault();

		let el = e.target,
			link = el.getAttribute('href'),
			elToScroll = document.querySelector(link) || document.querySelector(`*[data-section="${link.substr(1)}"]`),
			offsetTop = this.elOffsetTop(elToScroll);

		// Animation
		let startVal = window.pageYOffset,
			endVal = offsetTop,
			displace = endVal - startVal,
			duration = this.options.duration;

		if (displace === 0) return;

		animate((timePassed) => {
			let progress = timePassed / duration,
				newVal = this.timingFn(progress, startVal, displace);
			window.scrollTo(null, newVal);
		}, duration);

	}

	elOffsetTop(el) {
		let top = 0;
		while (el.parentNode) {
			top += el.offsetTop;
			el = el.parentNode;
		}
		return top;
	}

	init() {
		this.setClickEvent();
	}
}

module.exports = scrollToElement;

},{"./animate.js":1}],3:[function(require,module,exports){
'use strict';

var _scrollWindowToElement = require('scroll-window-to-element');

var _scrollWindowToElement2 = _interopRequireDefault(_scrollWindowToElement);

var _navScrollSpy = require('./nav-scroll-spy');

var _navScrollSpy2 = _interopRequireDefault(_navScrollSpy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HalfWindowHeight = window.innerHeight / 2;
var spy = new _navScrollSpy2.default({
    offset: HalfWindowHeight
});
spy.init();

// Smooth scroll to element
var scroll = new _scrollWindowToElement2.default({
    anchors: '.nav a',
    offset: HalfWindowHeight / 2
});
scroll.init();

},{"./nav-scroll-spy":4,"scroll-window-to-element":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _throttle = require('./throttle.js');

var _throttle2 = _interopRequireDefault(_throttle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NavScrollSpy = function () {
	function NavScrollSpy(options) {
		_classCallCheck(this, NavScrollSpy);

		var defaults = {
			offset: 0,
			currentClass: 'active',
			selector: 'nav a',
			throttle: 50
		};
		options ? this.options = Object.assign(defaults, options) : this.options = defaults;

		this.prevNavItems = [];
	}

	_createClass(NavScrollSpy, [{
		key: 'elOffsetTop',
		value: function elOffsetTop(el) {
			var top = 0;
			try {
				while (el.parentNode) {
					top += el.offsetTop;
					el = el.parentNode;
				}
				return top;
			} catch (err) {
				//#####################=> TODO
				console.warn('Section missing!', err);
			}
		}
	}, {
		key: 'getElements',
		value: function getElements() {
			// Nav Items
			this.navItems = document.querySelectorAll(this.options.selector);

			// Store Sections
			this.sections = [];
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = this.navItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var item = _step.value;

					var link = item.getAttribute('href');

					var section = document.querySelector(link) || document.querySelector('*[data-section="' + link.substr(1) + '"]');
					this.sections.push(section);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			this.sectionsLength = this.sections.length;
		}
	}, {
		key: 'getSectionsBoundaries',
		value: function getSectionsBoundaries() {
			var _this = this;

			this.sectionsBoundaries = [];
			this.sections.forEach(function (item, i) {
				var top = _this.elOffsetTop(item);
				_this.sectionsBoundaries.push({ top: top, bottom: top + item.offsetHeight, index: i });
			});
			this.lowerBound = this.sectionsBoundaries[this.sectionsLength - 1].bottom;
		}
	}, {
		key: 'setCurentMenuItems',
		value: function setCurentMenuItems(sectionsInScreen) {
			var _this2 = this;

			// No items for cleaning and new available
			if (this.prevNavItems.length === 0 && sectionsInScreen.length !== 0) {
				for (var key in sectionsInScreen) {
					this.navItems[key].parentNode.classList.add(this.options.currentClass);
				}
			}
			// Available prevNavItems and new available
			if (this.prevNavItems.length !== 0 && sectionsInScreen.length !== 0) {
				this.navItems.forEach(function (item, i) {
					// Remove current class
					if (_this2.prevNavItems[i] && !sectionsInScreen[i]) {
						item.parentNode.classList.remove(_this2.options.currentClass);
					}
					// Add current class
					if (!_this2.prevNavItems[i] && sectionsInScreen[i]) {
						item.parentNode.classList.add(_this2.options.currentClass);
					}
					// Else available in both arrays and already have class
				});
			}
			// Available prevNavItems and new not available. Remove old
			if (this.prevNavItems.length !== 0 && sectionsInScreen.length === 0) {
				for (var _key in this.prevNavItems) {
					this.navItems[_key].parentNode.classList.remove(this.options.currentClass);
				}
			}

			// Store current sections
			this.prevNavItems = sectionsInScreen;
		}
	}, {
		key: 'defineCurrentSection',
		value: function defineCurrentSection() {
			var winScrollPos = window.pageYOffset + this.options.offset;
			var sectionsInScreen = [];
			this.sectionsBoundaries.forEach(function (position, i) {
				if (winScrollPos > position.top && winScrollPos < position.bottom) sectionsInScreen[i] = position;
			});

			this.setCurentMenuItems(sectionsInScreen);
		}
	}, {
		key: 'setEvents',
		value: function setEvents() {
			// Throttling to improve performance
			var throttledDefineCurrentSection = (0, _throttle2.default)(this.defineCurrentSection, this.options.throttle).bind(this),
			    throttledGetSectionsBoundaries = (0, _throttle2.default)(this.getSectionsBoundaries, this.options.throttle).bind(this);

			// Scroll
			window.addEventListener('scroll', function () {
				return throttledDefineCurrentSection();
			});

			// Resize
			window.addEventListener('resize', function () {
				throttledGetSectionsBoundaries();
				throttledDefineCurrentSection();
			});
		}
	}, {
		key: 'init',
		value: function init() {
			this.getElements();
			this.getSectionsBoundaries();
			this.setEvents();
		}
	}]);

	return NavScrollSpy;
}();

exports.default = NavScrollSpy;

},{"./throttle.js":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = throttle;
function throttle(func, ms) {
    var isThrottled = false,
        savedArgs = void 0,
        savedThis = void 0;

    function wrapper() {
        if (isThrottled) {
            savedArgs = arguments;
            savedThis = this;
            return;
        }
        func.apply(this, arguments);
        isThrottled = true;
        setTimeout(function () {
            isThrottled = false;
            if (savedArgs) {
                wrapper.apply(savedThis, savedArgs);
                savedArgs = savedThis = null;
            }
        }, ms);
    }
    return wrapper;
}

},{}]},{},[3]);
